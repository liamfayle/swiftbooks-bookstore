/**
 * These tests are designed to be run against a database with valid data.
 * To set up a valid data environment, run app.js with the following flags:
 * --reset-db --init-db --fill-tables. 
 * 
 * ###################################################################
 * ENSURE YOU DONT RUN THIS WITH PRODUCTION DB SINCE IT DELETES TABLES!
 * ###################################################################
 * 
 * This will reset the database, initialize it with the required schema, 
 * and fill the tables with necessary data for testing.
 */


const request = require('supertest');
const app = require('../src/app'); 
const booklistModel = require('../src/models/booklistModel');



let manager_token;
beforeAll(async () => {
    const loginResponse = await request(app)
        .post('/api/auth/login')
        .send({
            email: 'user2@example.com', //managaer
            password: 'password'
        });

    manager_token = loginResponse.body.token; 
});


let admin_token;
beforeAll(async () => {
    const loginResponse = await request(app)
        .post('/api/auth/login')
        .send({
            email: 'user1@example.com', //admin
            password: 'password'
        });

    admin_token = loginResponse.body.token; 
});


let token;
beforeAll(async () => {
    const loginResponse = await request(app)
        .post('/api/auth/login')
        .send({
            email: 'user3@example.com', //user
            password: 'password'
        });

    token = loginResponse.body.token; 
});




describe('Search books', () => {

    it('Success search default fiction section if no params', async () => {  

        const response = await request(app)
            .get('/api/open/search');

        expect(response.statusCode).toBe(200);
    });


    it('Success search with title', async () => {  

        const response = await request(app)
            .get('/api/open/search')
            .query({
                title: 'Hunger Games'
            });

        expect(response.statusCode).toBe(200);
    });


    it('Success search with author', async () => {  

        const response = await request(app)
            .get('/api/open/search')
            .query({
                author: 'George R. R. Martin'
            });

        expect(response.statusCode).toBe(200);
    });



    it('Success search with field', async () => {  

        const response = await request(app)
            .get('/api/open/search')
            .query({
                field: 'Comedy'
            });

        expect(response.statusCode).toBe(200);
    });


    it('Success search with all', async () => {  

        const response = await request(app)
            .get('/api/open/search')
            .query({
                field: 'fiction',
                author: 'George R. R. Martin',
                title: 'A Dance with Dragons'
            });

        expect(response.statusCode).toBe(200);
    });


});



describe('Get book info from id', () => {

    it('Fail due to missing book id param', async () => {  

        const response = await request(app)
            .get('/api/open/book-info-from-id');

        expect(response.statusCode).toBe(400);
        expect(response.body.message).toEqual(expect.stringMatching(/no id provided/i));
    });

    it('Fail book with invalid id', async () => {  

        const response = await request(app)
            .get('/api/open/book-info-from-id')
            .query({
                id: 'fake'
            });

        expect(response.statusCode).toBe(404);
        expect(response.body.message).toEqual(expect.stringMatching(/book id not found/i));
    });


    it('Successfully return book info', async () => {  

        const response = await request(app)
            .get('/api/open/book-info-from-id')
            .query({
                id: 'A29JAAAAMAAJ'
            });

        expect(response.statusCode).toBe(200);
    });


});



describe('Get recent public booklists', () => {

    it('Get 10 most recently changed public booklists', async () => {  

        const response = await request(app)
            .get('/api/open/recent-public-booklists');

        expect(response.statusCode).toBe(200);
    });


});




describe('Get book ids from list', () => {

    it('Fail no list id provided', async () => {  

        const response = await request(app)
            .get('/api/open/list-book-ids');

        expect(response.statusCode).toBe(400);
        expect(response.body.message).toEqual(expect.stringMatching(/no list id provided/i));
    });


    it('Successfully get public list', async () => {  

        const response = await request(app)
            .get('/api/open/list-book-ids')
            .query({
                list_id: 2 //public list id
            });

        expect(response.statusCode).toBe(200);
    });


    it('Fail accessing private list and not logged in', async () => {  

        const response = await request(app)
            .get('/api/open/list-book-ids')
            .query({
                list_id: 1 //private list id (owned by userid 3)
            });

        expect(response.statusCode).toBe(401);
        expect(response.body.message).toEqual(expect.stringMatching(/cant access/i));
    });


    it('Successfully return private list belonging to user', async () => {  

        const response = await request(app)
            .get('/api/open/list-book-ids')
            .set('Authorization', `Bearer ${token}`)
            .query({
                list_id: 1 //private list id (owned by userid 3)
            });

        expect(response.statusCode).toBe(200);
    });


    it('Successfully return private list not belonging to user but user is manager', async () => {  

        const response = await request(app)
            .get('/api/open/list-book-ids')
            .set('Authorization', `Bearer ${manager_token}`)
            .query({
                list_id: 1 //private list id (owned by userid 3)
            });

        expect(response.statusCode).toBe(200);
    });


    it('Successfully return private list not belonging to user but user is admin', async () => {  

        const response = await request(app)
            .get('/api/open/list-book-ids')
            .set('Authorization', `Bearer ${admin_token}`)
            .query({
                list_id: 1 //private list id (owned by userid 3)
            });

        expect(response.statusCode).toBe(200);
    });


});



describe('Get book ids from list', () => {

    it('Fail no list id provided', async () => {  

        const response = await request(app)
            .get('/api/open/booklist-info-from-id');

        expect(response.statusCode).toBe(400);
        expect(response.body.message).toEqual(expect.stringMatching(/list id not provided/i));
    });


    it('Successfully get public list', async () => {  

        const response = await request(app)
            .get('/api/open/booklist-info-from-id')
            .query({
                list_id: 2 //public list id
            });

        expect(response.statusCode).toBe(200);
    });


    it('Fail accessing private list and not logged in', async () => {  

        const response = await request(app)
            .get('/api/open/booklist-info-from-id')
            .query({
                list_id: 1 //private list id (owned by userid 3)
            });

        expect(response.statusCode).toBe(401);
        expect(response.body.message).toEqual(expect.stringMatching(/cant access/i));
    });


    it('Successfully return private list belonging to user', async () => {  

        const response = await request(app)
            .get('/api/open/booklist-info-from-id')
            .set('Authorization', `Bearer ${token}`)
            .query({
                list_id: 1 //private list id (owned by userid 3)
            });

        expect(response.statusCode).toBe(200);
    });


    it('Successfully return private list not belonging to user but user is manager', async () => {  

        const response = await request(app)
            .get('/api/open/booklist-info-from-id')
            .set('Authorization', `Bearer ${manager_token}`)
            .query({
                list_id: 1 //private list id (owned by userid 3)
            });

        expect(response.statusCode).toBe(200);
    });


    it('Successfully return private list not belonging to user but user is admin', async () => {  

        const response = await request(app)
            .get('/api/open/booklist-info-from-id')
            .set('Authorization', `Bearer ${admin_token}`)
            .query({
                list_id: 1 //private list id (owned by userid 3)
            });

        expect(response.statusCode).toBe(200);
    });


});



describe('Get list reviews', () => {

    it('Fail due to missing list_id param', async () => {  

        const response = await request(app)
            .get('/api/open/get-reviews-for-list');

        expect(response.statusCode).toBe(400);
        expect(response.body.message).toEqual(expect.stringMatching(/list id not/i));
    });


    it('Succesfully get empty object (no reviews) as a public user', async () => {  

        const response = await request(app)
            .get('/api/open/get-reviews-for-list')
            .query({
                list_id: 1
            });

        expect(response.statusCode).toBe(200);
    });


    it('Succesfully get reviews as public user (dont get hidden ones)', async () => {  

        const response = await request(app)
            .get('/api/open/get-reviews-for-list')
            .query({
                list_id: 2
            });

        expect(response.statusCode).toBe(200);
    });



    it('Succesfully get reviews as manager user (get hidden ones)', async () => {  

        const response = await request(app)
            .get('/api/open/get-reviews-for-list')
            .set('Authorization', `Bearer ${manager_token}`)
            .query({
                list_id: 2
            });

        expect(response.statusCode).toBe(200);
    });


    it('Succesfully get reviews as admin user (get hidden ones)', async () => {  

        const response = await request(app)
            .get('/api/open/get-reviews-for-list')
            .set('Authorization', `Bearer ${admin_token}`)
            .query({
                list_id: 2
            });

        expect(response.statusCode).toBe(200);
    });


});